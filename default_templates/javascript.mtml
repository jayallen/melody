<mt:ignore>
/* The following functions are here to support legacy MT templates.
   If you have refreshed your JavaScript template but still use older
   MT comment templates, you may need to uncomment this block in order
   for those templates to work properly. Simply remove the wrapping
   'mt:ignore' tag to do so. */
function hideDocumentElement(id) { return mtHide(id) }
function showDocumentElement(id) { return mtShow(id) }
function individualArchivesOnLoad() { return mtEntryOnLoad() }
function writeCommenterGreeting() { return mtShowGreeting() }
function rememberMe(f) { return mtRememberMe(f) }
function forgetMe(f) { return mtForgetMe(f) }
</mt:ignore>

// The cookie name to use for storing the blog-side comment session cookie.
var cookie_name = "mt_blog<$MTBlogID$>_user";
// The cookie path to use for storing the blog-side comment session cookie.
var blog_path = "<$MTBlogURL$>".replace(/^.*?\/\/[^\/]+?\//, '/');

<mt:ignore>
/***
 * Simple routine for showing a DOM element (applying a CSS display
 * attribute of 'none').
 */
</mt:ignore>
function mtHide(id) {
    var el = (typeof id == "string") ? document.getElementById(id) : id;
    if (el) el.style.display = 'none';
}

<mt:ignore>
/***
 * Simple routine for showing a DOM element (applying a CSS display
 * attribute of 'block').
 */
</mt:ignore>
function mtShow(id) {
    var el = (typeof id == "string") ? document.getElementById(id) : id;
    if (el) el.style.display = 'block';
}

var captcha_timer;
<mt:ignore>
/***
 * Used to display the comment form and captcha field.
 */
</mt:ignore>
function mtShowAnonymousForm() {
    mtShow('comments-form');
    captcha_timer = setInterval('mtShowCaptcha()', 1000);
}

<mt:ignore>
/***
 * Displays a relative date.
 * 'ts' is a Date object, 'fds' is a string of the date which
 * will be displayed if the given date is older than 1 week.
 */
</mt:ignore>
function mtRelativeDate(ts, fds) {
    var now = new Date();
    var ref = ts;
    var delta = Math.floor((now.getTime() - ref.getTime()) / 1000);

    var str;
    if (delta < 60) {
        str = '<__trans phrase="moments ago">';
    } else if (delta <= 86400) {
        // less than 1 day
        var hours = Math.floor(delta / 3600);
        var min = Math.floor((delta % 3600) / 60);
        if (hours == 1)
            str = '<__trans phrase="[quant,_1,hour,hours] ago" params="1">';
        else if (hours > 1)
            str = '<__trans phrase="[quant,_1,hour,hours] ago" params="2">'.replace(/2/, hours);
        else if (min == 1)
            str = '<__trans phrase="[quant,_1,minute,minutes] ago" params="1">';
        else
            str = '<__trans phrase="[quant,_1,minute,minutes] ago" params="2">'.replace(/2/, min);
    } else if (delta <= 604800) {
        // less than 1 week
        var days = Math.floor(delta / 86400);
        var hours = Math.floor((delta % 86400) / 3600);
        if (days == 1)
            str = '<__trans phrase="[quant,_1,day,days] ago" params="1">';
        else if (days > 1)
            str = '<__trans phrase="[quant,_1,day,days] ago" params="2">'.replace(/2/, days);
        else if (hours == 1)
            str = '<__trans phrase="[quant,_1,hour,hours] ago" params="1">';
        else
            str = '<__trans phrase="[quant,_1,hour,hours] ago" params="2">'.replace(/2/, hours);
    }
    return str ? str : fds;
}

<mt:ignore>
/***
 * Used to display an edit link for the given entry.
 */
</mt:ignore>
function mtEditLink(entry_id, author_id) {
    var u = mtGetUser();
    if (! u) return;
    if (! entry_id) return;
    if (! author_id) return;
    if (u.id != author_id) return;
    var link = '<__trans phrase='<a href="[_1]">Edit</a>' params="<$MTAdminScript$>?__mode=view&amp;_type=entry&amp;id=' + entry_id + '">';
    document.write(link);
}

<mt:ignore>
/***
 * Displays a captcha field for anonymous commenters.
 */
</mt:ignore>
function mtShowCaptcha() {
    if (captcha_timer) clearInterval(captcha_timer);
    var div = document.getElementById('comments-open-captcha');
    if (div)
        div.innerHTML = '<$MTCaptchaFields$>';
}

<mt:ignore>
/* user object
    -- saved in user cookie --
    u.name (display name)
    u.url (link to home page)
    u.email (for anonymous only)
    u.userpic (url for commenter/author)
    u.profile (link to profile)
    u.is_trusted (boolean)
    u.is_author (user has posting rights)
    u.is_banned (banned status; neither post/comment perms)
    u.can_post (has permission to post)
    u.can_comment (has permission to comment)

    -- status fields --
    u.is_authenticated (boolean)
    u.is_anonymous (user is anonymous)
*/
</mt:ignore>

var is_preview;
var user;
<mt:ignore>
/***
 * Assigns a user object as the actively logged in user; also saves the
 * user information in a browser cookie.
 */
</mt:ignore>
function mtSetUser(u) {
    if (u) {
        // persist this
        user = u;
        mtSaveUser();
    }
}

<mt:ignore>
/***
 * Simple function that escapes single quote characters for storing
 * in a cookie.
 */
</mt:ignore>
function mtEscapeJS(s) {
    s = s.replace(/'/g, "&apos;");
    return s;
}

<mt:ignore>
/***
 * Simple function that unescapes single quote characters that were
 * stored in a cookie.
 */
</mt:ignore>
function mtUnescapeJS(s) {
    s = s.replace(/&apos;/g, "'");
    return s;
}

<mt:ignore>
/***
 * Serializes a user object into a string, suitable for storing as a cookie.
 */
</mt:ignore>
function mtBakeUserCookie(u) {
    var str = "";
    if (u.name) str += "name:'" + mtEscapeJS(u.name) + "';";
    if (u.url) str += "url:'" + mtEscapeJS(u.url) + "';";
    if (u.email) str += "email:'" + mtEscapeJS(u.email) + "';";
    if (u.is_authenticated) str += "is_authenticated:'1';";
    if (u.profile) str += "profile:'" + mtEscapeJS(u.profile) + "';";
    if (u.userpic) str += "userpic:'" + mtEscapeJS(u.userpic) + "';";
    str += "is_trusted:'" + (u.is_trusted ? "1" : "0") + "';";
    str += "is_author:'" + (u.is_author ? "1" : "0") + "';";
    str += "is_banned:'" + (u.is_banned ? "1" : "0") + "';";
    str += "can_post:'" + (u.can_post ? "1" : "0") + "';";
    str += "can_comment:'" + (u.can_comment ? "1" : "0") + "';";
    str = str.replace(/;$/, '');
    return str;
}

<mt:ignore>
/***
 * Unserializes a user cookie and returns a user object with the restored
 * state.
 */
</mt:ignore>
function mtUnbakeUserCookie(s) {
    if (!s) return;

    var u = {};
    var m;
    while (m = s.match(/^((name|url|email|is_authenticated|profile|userpic|is_trusted|is_author|is_banned|can_post|can_comment):'([^']+?)';?)/)) {
        s = s.substring(m[1].length);
        if (m[2].match(/^(is|can)_/)) // boolean fields
            u[m[2]] = m[3] == '1' ? true : false;
        else
            u[m[2]] = mtUnescapeJS(m[3]);
    }
    if (u.is_authenticated) {
        u.is_anonymous = false;
    } else {
        u.is_anonymous = true;
        u.can_post = false;
        u.is_author = false;
        u.is_banned = false;
        u.is_trusted = false;
    }
    return u;
}

<mt:ignore>
/***
 * Retrieves an object of the currently logged in user's state.
 * If no user is logged in or cookied, this will return null.
 */
</mt:ignore>
function mtGetUser() {
    if (!user) {
        var cookie = mtGetCookie(cookie_name);
        if (!cookie) return;
        user = mtUnbakeUserCookie(cookie);
        if (! user) {
            user = {};
            user.is_anonymous = true;
            user.can_post = false;
            user.is_author = false;
            user.is_banned = false;
            user.is_trusted = false;
        }
    }
    return user;
}

<mt:ignore>
/***
 * Issues a request to the MT comment script to retrieve the currently
 * logged-in user (if any).
 */
</mt:ignore>
function mtFetchUser() {
    document.write('<scr' + 'ipt src="<$MTCGIPath$><$MTCommentScript$>?__mode=session_js&blog_id=<$MTBlogID$>&jsonp=mtSetUser"></scr' + 'ipt>');
}

<mt:ignore>
/***
 * Called when the 'Remember me' checkbox is changed. If the checkbox
 * is cleared, the cached user cookie is immediately cleared.
 */
</mt:ignore>
function mtRememberMeOnClick(b) {
    if (!b.checked)
        mtClearUser(b.form);
    return true;
}

<mt:ignore>
/***
 * Called when comment form is sent.
 * Required parameter: Form DOM object of comment form.
 * If form has a 'bakecookie' member, it will be used to signal
 * storing the anonymous commenter information to a cookie.
 * If form has a 'armor' member, it will be used to store
 * a token that is checked by the comment script.
 */
</mt:ignore>
var mtRequestSubmitted = false;
function mtCommentOnSubmit(f) {
    if (!mtRequestSubmitted) {
        mtRequestSubmitted = true;

        if (f.armor)
            f.armor.value = '<$MTBlogSitePath encode_sha1="1"$>';
        if (f.bakecookie && f.bakecookie.checked)
            mtSaveUser(f);

        // disable submit buttons
        if (f.preview_button) f.preview_button.disabled = true;
        if (f.post) f.post.disabled = true;
        if (f.preview.value == '1')
            f.preview_button.value = '<__trans phrase="Posting...">';
        else
            f.post.value = '<__trans phrase="Posting...">';

        return true;
    }
    return false;
}

<mt:ignore>
/***
 * Called when an entry archive page is loaded.
 * This routine controls which elements of the comment form are shown
 * or hidden, depending on commenter type and blog configuration.
 */
</mt:ignore>
function mtEntryOnLoad() {
    var u = mtGetUser();

<mt:unless tag="IfCommentsAccepted">
    mtHide('comments-open');
</mt:unless>
<mt:unless tag="IfPingsAccepted">
    mtHide('trackbacks-info');
</mt:unless>

<mt:IfRegistrationRequired>
    if ( !u || u.is_anonymous ) {
        mtHide('comments-open-data');
        mtHide('comments-open-text');
        mtHide('comments-open-footer');
    } else {
        mtHide('comments-open-data');
        mtShow('comments-open-text');
        mtShow('comments-open-footer');
    }
<mt:else>
<mt:IfRegistrationAllowed>
    if (is_preview && u && u.is_anonymous) {
        mtShowAnonymousForm();
    } else {
        // comments are allowed but registration not required
        if ( !u || u.is_anonymous )
            mtHide('comments-form');
        else
            mtHide('comments-open-data');
    }
<mt:else>
    mtShowAnonymousForm();
</mt:IfRegistrationAllowed>
</mt:IfRegistrationRequired>

    mtShowGreeting();

    // populate anonymous comment fields if
    // user is cookied as anonymous
    var cf = document.comments_form;
    if (cf) {
        if (u && u.is_anonymous) {
            if (u.email) cf.email.value = u.email;
            if (u.name) cf.author.value = u.name;
            if (u.url) cf.url.value = u.url;
            if (cf.bakecookie)
                cf.bakecookie.checked = u.name || u.email;
        }
        if (cf.post.disabled) {
            cf.post.disabled = false;
            cf.post.value = '<__trans phrase="Submit">';
        }
        if (cf.preview_button.disabled) {
            cf.preview_button.disabled = false;
            cf.preview_button.value = '<__trans phrase="Preview">';
        }
    }
}

<mt:ignore>
/***
 * Handles the action of the "Sign in" link. First clears any existing
 * user cookie, then directs to the MT comment script to sign the user in.
 */
</mt:ignore>
function mtSignIn(entry_id) {
    var doc_url = document.URL;
    doc_url = doc_url.replace(/#.+/, '');
    var url = '<$MTSignInLink$>';
    if (entry_id)
        url += '&entry_id=' + entry_id;
    else
        url += '&return_url=' + encodeURIComponent(doc_url);
    mtClearUser();
    location.href = url;
}

<mt:ignore>
/***
 * Handles the action of the "Sign out" link. First clears any existing
 * user cookie, then direts to the MT comment script to sign the user out.
 */
</mt:ignore>
function mtSignOut(entry_id) {
    var url = '<$MTSignOutLink$>&entry_id=' + entry_id;
    mtClearUser();
    location.href = url;
}

<mt:ignore>
/***
 * Handles the display of the greeting message, depending on what kind of
 * user is logged in and blog comment policy.
 */
</mt:ignore>
function mtShowGreeting() {
<mt:IfRegistrationAllowed>
    var reg_reqd = <mt:IfRegistrationRequired>true<mt:else>false</mt:IfRegistrationRequired>;

    var cf = document.comments_form;
    if (!cf) return;

    var el = document.getElementById('comment-greeting');
    if (!el)  // legacy MT 4.x element id
        el = document.getElementById('comment-form-external-auth');
    if (!el) return;

    var eid = cf.entry_id;
    var entry_id;
    if (eid) entry_id = eid.value;

    var phrase;
    var u = mtGetUser();

    if ( u && u.is_authenticated ) {
        if ( u.is_banned ) {
            phrase = '<__trans phrase="You do not have permission to comment on this blog. ([_1]sign out[_2])" params="<a href="javascript:void(0);" onclick="mtSignOut(' + entry_id + ')">%%</a>">';
        } else {
            var user_link;
            if ( u.is_author ) {
                user_link = '<a href="<$MTCGIPath$><$MTCommentScript$>?__mode=edit_profile&blog_id=<$MTBlogID$>';
                if (entry_id)
                    user_link += '&entry_id=' + entry_id;
                user_link += '">' + u.name + '</a>';
            } else {
                // registered user, but not a user with posting rights
                if (u.url)
                    user_link = '<a href="' + u.url + '">' + u.name + '</a>';
                else
                    user_link = u.name;
            }
            // TBD: supplement phrase with userpic if one is available.
            phrase = '<__trans phrase="Thanks for signing in, [_1]. ([_2]sign out[_3])" params="' + user_link + '%%<a href="javascript:void(0)" onclick="mtSignOut(' + entry_id + ')">%%</a>">';
        }
    } else {
        if (reg_reqd) {
            phrase = '<__trans phrase="[_1]Sign in[_2] to comment." params="<a href="javascript:void(0)" onclick="mtSignIn(' + entry_id + ')">%%</a>">';
        } else {
            phrase = '<__trans phrase="[_1]Sign in[_2] to comment, or [_3]comment anonymously[_2]." params="<a href="javascript:void(0)" onclick="mtSignIn(' + entry_id + ')">%%</a>%%<a href="javascript:void(0);" onclick="mtShowAnonymousForm();">">';
        }
    }
    el.innerHTML = phrase;
<mt:else>
    mtShowCaptcha();
</mt:IfRegistrationAllowed>
}

<mt:ignore>
/***
 * Handles the action of the 'Reply' links.
 */
</mt:ignore>
function mtReplyCommentOnClick(parent_id, author) {
    mtShow('comment-form-reply');

    var checkbox = document.getElementById('comment-reply');
    var label = document.getElementById('comment-reply-label');
    var text = document.getElementById('comment-text');

    // Populate label with new values
    var reply_text = '<__trans phrase="Replying to <a href="#comment-[_1]">comment from [_2]</a>" params="'+ parent_id +'%%'+ author +'">';
    label.innerHTML = reply_text;

    checkbox.value = parent_id; 
    checkbox.checked = true;
    text.focus();

    mtSetCommentParentID();
}

<mt:ignore>
/***
 * Sets the parent comment ID when replying to a comment.
 */
</mt:ignore>
function mtSetCommentParentID() {
    var checkbox = document.getElementById('comment-reply');
    var parent_id_field = document.getElementById('comment-parent-id');
    if (!checkbox || !parent_id_field) return;

    var pid = 0;
    if (checkbox.checked == true)
        pid = checkbox.value;
    parent_id_field.value = pid;
}

<mt:ignore>
/***
 * Persists a copy of the current user cookie into the browser cookie stash.
 */
</mt:ignore>
function mtSaveUser(f) {
    // We can't reliably store the user cookie during a preview.
    if (is_preview) return;

    var u = mtGetUser();

    if (f && (!u || u.is_anonymous)) {
        if ( !u ) {
            u = {};
            u.is_authenticated = false;
            u.can_comment = true;
            u.is_author = false;
            u.is_banned = false;
            u.is_anonymous = true;
            u.is_trusted = false;
        }
        if (f.author != undefined) u.name = f.author.value;
        if (f.email != undefined) u.email = f.email.value;
        if (f.url != undefined) u.url = f.url.value;
    }

    if (!u) return;

    var cache_period = 60 * 60 * 1000; // 1 hour

    // cache anonymous user info for a long period if the
    // user has requested to be remembered
    if (u.is_anonymous && f && f.bakecookie && f.bakecookie.checked)
        cache_period = 365 * 24 * 60 * 60 * 1000;

    var now = new Date();
    mtFixDate(now);
    now.setTime(now.getTime() + cache_period);

    var cmtcookie = mtBakeUserCookie(u);
    mtSetCookie(cookie_name, cmtcookie, now, blog_path, null,
        location.protocol == 'https:');
}

<mt:ignore>
/***
 * Clears the blog-side user cookie.
 */
</mt:ignore>
function mtClearUser() {
    mtDeleteCookie(cookie_name, blog_path);
}

<mt:ignore>
/***
 * Sets a browser cookie.
 */
</mt:ignore>
function mtSetCookie(name, value, expires, path, domain, secure) {
    var curCookie = name + "=" + escape(value) +
        (expires ? "; expires=" + expires.toGMTString() : "") +
        (path ? "; path=" + path : "") +
        (domain ? "; domain=" + domain : "") +
        (secure ? "; secure" : "");
    document.cookie = curCookie;
}

<mt:ignore>
/***
 * Retrieves a browser cookie.
 */
</mt:ignore>
function mtGetCookie (name) {
    var prefix = name + '=';
    var c = document.cookie;
    var cookieStartIndex = c.indexOf(prefix);
    if (cookieStartIndex == -1)
        return '';
    var cookieEndIndex = c.indexOf(";", cookieStartIndex + prefix.length);
    if (cookieEndIndex == -1)
        cookieEndIndex = c.length;
    return unescape(c.substring(cookieStartIndex + prefix.length, cookieEndIndex));
}

<mt:ignore>
/***
 * Deletes a browser cookie.
 */
</mt:ignore>
function mtDeleteCookie (name, path, domain, secure) {
    if (mtGetCookie(name))
        document.cookie = name + "=" +
            (path ? "; path=" + path : "") +
            (domain ? "; domain=" + domain : "") +
            (secure ? "; secure" : "") +
            "; expires=Thu, 01-Jan-70 00:00:01 GMT";
}

function mtFixDate(date) {
    var skew = (new Date(0)).getTime();
    if (skew > 0)
        date.setTime(date.getTime() - skew);
}

<mt:ignore>
/***
 * Returns a XMLHttpRequest object (for Ajax operations).
 */
</mt:ignore>
function mtGetXmlHttp() {
    if ( !window.XMLHttpRequest ) {
        window.XMLHttpRequest = function() {
            var types = [
                "Microsoft.XMLHTTP",
                "MSXML2.XMLHTTP.5.0",
                "MSXML2.XMLHTTP.4.0",
                "MSXML2.XMLHTTP.3.0",
                "MSXML2.XMLHTTP"
            ];

            for ( var i = 0; i < types.length; i++ ) {
                try {
                    return new ActiveXObject( types[ i ] );
                } catch( e ) {}
            }

            return undefined;
        };
    }
    if ( window.XMLHttpRequest )
        return new XMLHttpRequest();
}

// BEGIN: fast browser onload init
// Modifications by David Davis, DWD
// Dean Edwards/Matthias Miller/John Resig
// http://dean.edwards.name/weblog/2006/06/again/?full#comment5338

function mtInit() {
    // quit if this function has already been called
    if (arguments.callee.done) return;

    // flag this function so we don't do the same thing twice
    arguments.callee.done = true;

    // kill the timer
    // DWD - check against window
    if ( window._timer ) clearInterval(window._timer);

    // DWD - fire the window onload now, and replace it
    if ( window.onload && ( window.onload !== window.mtInit ) ) {
        window.onload();
        window.onload = function() {};
    }
}

/* for Mozilla/Opera9 */
if (document.addEventListener) {
    document.addEventListener("DOMContentLoaded", mtInit, false);
}

/* for Internet Explorer */
/*@cc_on @*/
/*@if (@_win32)
document.write("<script id=__ie_onload defer src=javascript:void(0)><\/script>");
var script = document.getElementById("__ie_onload");
script.onreadystatechange = function() {
    if (this.readyState == "complete") {
        mtInit(); // call the onload handler
    }
};
/*@end @*/

/* for Safari */
if (/WebKit/i.test(navigator.userAgent)) { // sniff
    _timer = setInterval(function() {
        if (/loaded|complete/.test(document.readyState)) {
            mtInit(); // call the onload handler
        }
    }, 10);
}

/* for other browsers */
window.onload = mtInit;

// END: fast browser onload init

<mt:IfRegistrationAllowed>
/***
 * If request contains a '#_login' or '#_logout' hash, use this to
 * also delete the blog-side user cookie, since we're coming back from
 * a login, logout or edit profile operation.
 */
var clearCookie = ( window.location.hash && window.location.hash.match( /^#_log(in|out)/ ) ) ? true : false;
if (clearCookie) {
    // clear any logged in state
    mtClearUser();
    if (RegExp.$1 == 'in')
        mtFetchUser();
} else if (! mtGetUser()) {
    // gather user info
    mtFetchUser();
}
</mt:IfRegistrationAllowed>
